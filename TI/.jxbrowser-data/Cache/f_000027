<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Multiple Gesture and Motion Detection Lab - 68xx</title>
</head>

<!-- START PRE -->
<link rel="stylesheet" href="../../../.metadata/.html/scripts/strapdown/v/0.2/fonts/ubuntu-regular-woff.css"/>
<link rel="stylesheet" href="../../../.metadata/.html/scripts/strapdown/v/0.2/fonts/glyphicons-halflings-regular.css"/>
<link rel="stylesheet" href="../../../.metadata/.html/scripts/strapdown/v/0.2/themes/united2.min.css"/>
<link rel="stylesheet" href="../../../.metadata/.html/scripts/strapdown/v/0.2/themes/bootstrap-responsive.min.css"/>
<link rel="stylesheet" href="../../../.metadata/.html/scripts/strapdown/v/0.2/strapdown.css"/>
<link rel="stylesheet" href="../../../.metadata/.html/styles/link.css"/>
<!-- END PRE -->

<xmp style="display:none;" class="col-xs-6">


Multiple Gesture and Motion Detection Overview 
===========

This lab demonstrates the use of TI single-chip millimeter-wave (mmwave) technology for detection and classification of natural gestures. The example provided in this demo can recognize two different hand gestures: Left swipe and Down swipe. In addition, the lab also demonstrates Person detection (through motion) at various ranges up to about 3.5 meters.

Such a system can be used to implement gesture based Human Machine Interfaces (HMI) which switch to a low power mode for motion/presence detection when someone is not around and switch to gesture detection mode when motion is detected near the sensor. 

The lab provides full source code with CCS projects and runs on the TI IWR6843 60GHz mmWave sensor Evaluation Platform.

<img src="images/gesture_demo.png" width="600" class="img-responsive"/>

<a name="quickstart"></a>  
Quickstart
===========

The quickstart uses:
* Precompiled binaries for flashing the device using Uniflash.
* [TeraTerm](https://ttssh2.osdn.jp/index.html.en) or another terminal emulation software to display the gesture and motion detection information. The instructions provided in this user guide are based on [TeraTerm](https://ttssh2.osdn.jp/index.html.en). 


1. Hardware and Software Requirements
-----------

### Hardware

 Item                     | Details     
--------------------------|-----------------
  Device                  |  [Industrial mmWave Carrier Board](http://www.ti.com/tool/MMWAVEICBOOST) and IWR6843 ODS Antenna Board   
                          |  
                          |  Note: The rest of this document will refer to the above board combination as <b>EVM</b> . 
  Computer                |  Windows 7 or 10 PC with [TeraTerm](https://ttssh2.osdn.jp/index.html.en) or another terminal emulator installed installed.
  Micro USB Cable         |  Provided with the [Industrial Radar Carrier Board](http://www.ti.com/tool/MMWAVEICBOOST)
  Power Supply            |  5V, 3A with 2.1-mm barrel jack (center positive). The power supply can be wall adapter style or a battery pack with a USB to barrel jack cable.

[[b! IWR6843 ODS Antenna Board
   This board is based on the [IWR6843 single-chip mmWave Sensor](http://www.ti.com/product/IWR6843) and uses an antenna design that provides a wide Field of View in both Azimuth and Elevation. The pictures below show the physical antenna layout and the resulting virtual antenna array for the IWR6843 ODS antenna board

<img src="images/ods_antenna_layout.jpg" width="350"/> <img src="images/ods_virtual_array.jpg" width="350"/>

Please contact your local TI Sales representative for information regarding the availability of this board.

   ]]


### Software

 Tool                       | Version                   | Details            |Download Link     
----------------------------|---------------------------|--------------------|--------------
  mmWave Industrial Toolbox |  Latest                   | Contains pre-compiled binaries and source code for the lab | [mmWave Industrial Toolbox](http://dev.ti.com/tirex/#/?link=Software%2FmmWave%20Sensors%2FIndustrial%20Toolbox)
  Uniflash                  |  Latest                   | Uniflash tool is used for flashing TI mmWave Radar devices. | [Download offline tool](http://www.ti.com/tool/UNIFLASH) or use the [Cloud version](https://dev.ti.com/uniflash/#!/)   
  
  [[+d Expand for mmWave Industrial Toolbox installation without Code Composer Studio
  1. Navigate to the [TI Resource Explorer](http://dev.ti.com/tirex/#/?link=Software%2FmmWave%20Sensors%2FIndustrial%20Toolbox)
  2. Click the download button. A .zip file will be downloaded.

  <img src="images/common/industrial_toolbox_download.png" width="400"/>
  
  3. Navigate to the .zip file. Right click and then select **Extract All...**. Do NOT use the default path. The path must be `C:\ti`.
  
  <img src="images/common/extract.png" width="400"/>
  4. Verify installation by navigating to view the Multiple Gesture and Motion Detection - 68xx Lab files at `C:\ti\<mmwave_industrial_toolbox_install_dir>\labs\lab0023_multi_gesture_and_motion_det_68xx`
  +]]  
  
  [[+d Expand for mmWave Industrial Toolbox installation using Code Composer Studio
  1. Open CCS 
  2. In the top toolbar, navigate to **View &rarr; Resource Explorer** 
  3. In the **Resource Explorer** side panel (not the main panel with "Welcome to.."), navigate to Industrial Toolbox at **Software &rarr; mmWave Sensors &rarr; Industrial Toolbox - &lt;ver&gt;**
  4. With Industrial Toolbox selected, the main panel should show the Industrial toolbox landing page. Click on the **Download icon** in the right corner of panel.
 
  <img src="images/common/industrial_toolbox_download.png" width="400"/>
  
  5. Verify installation by navigating to view the Multiple Gesture and Motion Detection - 68xx Lab files at `C:\ti\<mmwave_industrial_toolbox_install_dir>\labs\lab0023_multi_gesture_and_motion_det_68xx`
 +]] 
  
<a name="physical_setup"></a>  
2. Physical Setup
-----------  
1. Setup the Carrier Board in standalone mode using the S1 switch combination as shown below.

   <img src="images/common/mmwaveicboost_standalone_mode.jpg" width="300"/> <img src="images/common/mmwaveicboost_standalone_jumpers.png" width="300"/>

2. Connect the IWR6843ODS antenna board to the MMWAVEICBOOST board and mount the EVM vertically as shown below. The EVM should be positioned with antenna oriented on the top side and facing gesturing hand. The lab is configured to detect gestures within 0.3m of the EVM.
  
 <img src="images/common/6843_evm_connectors.png" width="500" class="img-responsive"/> 

3. Plug in micro-usb and power supply to EVM using the connectors shown above. 




<a name="flash_the_evm"></a>  
3. Flash the EVM
-----------
* Power on the EVM using a 5V/3A power supply.
* Flash the following image using **Uniflash**
 

 Image                    | Location    
--------------------------|------------
  Meta Image 1/RadarSS    |  `<mmwave_industrial_toolbox_install_dir>\labs\lab0023_multi_gesture_and_motion_det_68xx\prebuilt_binaries\multi_gesture_demo_68xx.bin` 
 
[[+d Expand for help using Uniflash 
* Connect the EVM to your PC and check the COM ports in **Windows Device Manager**
  * The EVM exports two virtual COM ports as shown below:
    * XDS110 Class Application/User UART (COM UART): Used for passing configuration data and firmware to the EVM
    * XDS110 Class Auxiliary Data Port (COM AUX): Used to send processed radar data output

    <img src="images/common/com_port.png" width="300"/>
{{b Note the COM UART and COM AUX port numbers, as they will be used later for flashing and running the lab.}}
* Put the EVM in flashing mode by connecting jumpers on **SOP0** and **SOP2** as shown in the image. Then power cycle the EVM with **SW2** (NRST).
  
  <img src="images/common/mmwaveicboost_sop_jumpers.jpg" width="300"/> <img src="images/common/mmwaveicboost_sw2_nrst.jpg" width="300"/>
* Open the **UniFlash tool** ([Download offline tool](http://www.ti.com/tool/UNIFLASH) or use the [Cloud version](https://dev.ti.com/uniflash/#!/) )
  * In the New Configuration section, locate and select the appropriate device (IWR6843)
  * Click Start to proceed

 <img src="images/common/uniflash_device_select.png" width="400"/>
  

* Click the **Settings & Utilities** tab. Under setup, fill the **COM Port** text box with the Application/User UART COM port number (COM UART) noted earlier.  
* In the **Program** tab, browse and locate the images (.bin file) as specified [above](#flash_the_evm).

 <img src="images/common/uniflash.png" width="600"/> 

* **Power cycle** the device and click on **Load Images**
    
    [[g! Successful Flash Procedure
UniFlashâ€™s console should indicate: [SUCCESS] Program Load completed successfully
]]

* Power off the board and **remove only SOP2 jumper** 

  [[y SOP2 Removed?
Ensure that the jumper has been removed and the EVM power cycled. This puts the board back in functional mode.  
]]
+]]

<a name="run_the_lab"></a>
4. Run the Lab
-----------
### 1. GUI Setup 

* Power up the EVM and connect it to the Windows PC with the provided USB cable (make sure that the SOP2 jumper is removed). Mount the setup vertically as shown in [Physical Setup](#physical_setup)
* Open two TeraTerm Instances, one each for the two EVM COM ports based on the port numbers from the [Flash the EVM](#flash_the_evm) section as described below:
 * **TeraTerm #1 (Control UART):** Go to **Setup &rarr; Serial Port** dialog and enter the COM Port number for the XDS110 Class Application/User UART Port and select the baud rate and other settings as shown below and press OK.

   <img src="images/teraterm_control_port_config.png" width="300"/>
 
 * **TeraTerm #2 (Data UART):** Go to **Setup &rarr; Serial Port** dialog and enter the COM Port number for the XDS110 Class Auxiliary Data Port and select the baud rate and other settings as shown below and press OK.
  
   <img src="images/teraterm_data_port_config.png" width="300"/>
 
  * Press Enter on the Control UART terminal. You should see the <b>mmWave:/&gt;</b> prompt which indicates that the demo started correctly. Please note that this is the only purpose of opening the control UART terminal in this demo, as the gesture demo firmware auto-configures the sensor with pre-programmed chirp configuration at startup.

### 2. Running the Demo   
-----------
* This lab demonstrates the following features.
 * Gesture Detection/Classification: Detection/Classification of two gestures (within a range of about 0.3m): **Left Swipe** and **Down Swipe**
 * Motion Detection: Detection of a person in the vicinity of the sensor at various ranges up to about 3.5m.
 * The demo outputs characters according to the above functions on the Data UART terminal as listed below:
   <img src="images/gesture_output.png" width="600"/>
 
[[b! Note
With respect to Person/Motion detection, an output character is sent only when when a change in state occurs. The device will not continually send a UART message if a person is continuously in the vicinity of the radar. Only if the person leaves the area will the UART signal that now there is no one in front of the radar.
]]
* Perform the above gestures with your hand in front of sensor. The Data UART terminal should show the corresponding output.
* Walk about 3-4 meters away from the sensor and wait for about 5 seconds. Then walk back towards the sensor. The Data UART terminal should show the output corresponding to the different ranges mentioned in the table above.
* This concludes the Quick Start Section 


Developer's Guide
===========

Build the Firmware from Source Code
-----------
<a name="software_requirements"></a>
### 1. Software Requirements

 Tool                       | Version                   | Download Link    
----------------------------|---------------------------|--------------
  TI mmWave SDK             |  3.1.1.2                 |  [TI mmWave SDK 3.1.1.2](http://software-dl.ti.com/ra-processors/esd/MMWAVE-SDK/03_01_01_02/index_FDS.html) and all the related tools are required to be installed as specified in the mmWave SDK release notes
  Code Composer Studio      |  8.1.0                     |  [Code Composer Studio v8](http://processors.wiki.ti.com/index.php/Download_CCS#Code_Composer_Studio_Version_8_Downloads)
  TI SYS/BIOS               |  6.73.01.01               |  Included in mmWave SDK installer
  TI ARM Compiler           |  16.9.6.LTS               |  Included in mmWave SDK installer 
  TI CGT Compiler           |  8.1.3                    |  Included in mmWave SDK installer
  XDC                       |  3.50.08.24               |  Included in mmWave SDK installer 
  C64x+ DSPLIB              |  3.4.0.0                  |  Included in mmWave SDK installer 
  C674x DSPLIB              |  3.4.0.0                  |  Included in mmWave SDK installer 
  C674x MATHLIB (little-endian, elf/coff format)              |  3.1.2.1                  |  Included in mmWave SDK installer 
  mmWave Radar Device Support Package              |  1.6.1 or later                  |  Upgrade to the latest using CCS update process (see SDK user guide for more details) 
  TI Emulators Package              |  7.0.188.0 or later                  |  Upgrade to the latest using CCS update process (see SDK user guide for more details) 
  Uniflash              |  Latest                  |  Uniflash tool is used for flashing TI mmWave Radar devices. [Download offline tool](http://www.ti.com/tool/UNIFLASH) or use the [Cloud version](https://dev.ti.com/uniflash/#!/) 

### 2. Import Lab Project

For the Multiple Gesture and Motion Detection lab, there are two projects, the DSS for the C674x DSP core and the MSS project for the R4F core, that need to be imported to CCS and compiled to generate firmware for the xWR6843. You can import the project in your CCS workspace using TI Resource Explorer in CCS or using a browser. Both methods of importing projects are defined in the Expand boxes below.

* Start CCS and setup workspace as desired. 
* Import the projects below to CCS using either TI Resource Explorer in CCS or CCS Import Projectspecs method:
   * **multi_gesture_68xx_dss** 
   * **multi_gesture_68xx_mss**

[[+d Expand for details on importing via TI Resource Explorer in CCS
* In the top toolbar, navigate to **View &rarr; Resource Explorer** 
* In the **Resource Explorer** side panel (not the main panel with "Welcome to.."), navigate to **Software &rarr; mmWave Sensors &rarr; Industrial Toolbox - &lt;ver&gt; &rarr; Labs &rarr; Multi Gesture and Motion Detection - 68xx**
* Under the expanded **Multi Gesture and Motion Detection** folder, there should be two CCS projects, **CCS Project - DSS** and **CCS Project - MSS**. 
* For each of the two projects: Click on the project, which should open the project in the right main panel, and then click on the Import to IDE button <img src="images/common/import_ide_icon.png" width="40"/>.
+]] 

[[+d Expand for details on importing via CCS Import Projectspecs
* In the top toolbar, navigate to **Project &rarr; Import CCS Projects...** 
* With the **Select search-directory** option enabled, click **Browse...**, navigate to the **lab0023_multi_gesture_and_motion_det_68xx** folder at `C:\ti\<mmwave_industrial_toolbox_install_dir>\labs\lab0023_multi_gesture_and_motion_det_68xx`, and then click **OK**.
* Under **Discovered projects**, select **multi_gesture_68xx_dss** and **multi_gesture_68xx_mss** (ignore any other projects), then click **Finish**. 
+]]

[[g! Successful Import to IDE
  After using either method, both projects should be visible in **CCS Project Explorer**
  <img src="images/project_impt.png" width="400"/> 
]] 
  
[[b! Project Workspace
When importing projects to a workspace, a copy is created in the workspace. The copy in user's workspace is the one that gets built and all modifications will only be implemented for the workspace copy. The original project downloaded in mmWave Industrial Toolbox is not used once imported.
]]
  

### 3. Build the Lab

#### **Build DSS Project**
The DSS project must be built before the MSS project.

With the **multi_gesture_68xx_dss**  project selected in **Project Explorer**, right click on the project and select **Rebuild Project**. 
  <img src="images/rebuild_project_dss.png" width="400"/> 

{{y Selecting Rebuild instead of Build ensures that the project is always re-compiled. This is especially important in case the previous build failed with errors.}}

[[g! Successful DSS Project Build
In the **Project Explorer** panel, navigate to and expand **multi_gesture_68xx_dss &rarr; Debug** directory. On successfull build, the following files should appear in the **Debug** folder:
* multi_gesture_68xx_dss.xe674 (this is the C674x DSP binary used for CCS debug mode)
]]

#### **Build MSS Project**

After the DSS project is successfully built, select **multi_gesture_68xx_mss** in **Project Explorer**, right click on the project and select **Rebuild Project**.

[[g! Successful MSS Project Build
In the **Project Explorer** panel, navigate to and expand **multi_gesture_68xx_mss &rarr; Debug** directory. The project has been successfully built if the following files appear in the **Debug** folder:

* multi_gesture_68xx_mss.xer4f (this is the Cortex R4F binary used for CCS debug mode) 
* **multi_gesture_demo_68xx.bin** (this is the flashable binary used for deployment mode)
]]


[[r! Build Fails with Errors
If the build fails with errors, please ensure that all the [prerequisites](#software_requirements) are installed as mentioned under [Software Requirements](#software_requirements).
]]

[[b! Note
As mentioned in the [Quickstart](#quickstart) section, pre-built binary files, are provided in `C:\ti\<mmwave_industrial_toolbox_install_dir>\labs\lab0023_multi_gesture_and_motion_det_68xx\prebuilt_binaries`
]]

### 4. Execute the Lab

There are two ways to execute the compiled code on the EVM:
* **Deployment mode**: In this mode, the EVM boots autonomously from flash and starts running the bin image
    * Using Uniflash, flash the **multi_gesture_demo_68xx.bin** found at `<PROJECT_WORKSPACE_DIR>\multi_gesture_68xx_mss\Debug\multi_gesture_demo_68xx.bin`  
    * The procedure to flash the EVM is the same as detailed in the [Flash the EVM](#flash_the_evm) section. 
* **Debug mode**: This mode is is used for downloading and running the executable (.xer4f and .xe674) from CCS. This mode enables JTAG connection with CCS while lab is running; useful during development and debugging
     
  
[[+d Expand for help with Debug mode:
The CCS debug firmware (provided with the mmWave SDK) needs to be flashed once on the EVM. 
* CCS Debug method is enabled by flashing the CCS Debug Firmware (provided with the mmWave SDK) using the methods covered in the Quickstart [Flash the Device](#1-flash-the-evm) section.
* Use the following image instead       

Image           | Location     | Comment        
--------------------------|----------------------------|------------------------
  Meta Image 1/RadarSS    |  `C:\ti\mmwave_sdk_<ver>\packages\ti\utils\ccsdebug\xwr68xx_ccsdebug.bin` | Provided with the mmWave SDK  
  
  
   
After the CCS debug firmware has been flashed, connect the EVM to CCS
  * Create a target configuration (skip to "Open the target..." if config already created previously in another lab for xwr16xx)
    * Go to **File &rarr; New &rarr; New Target Configuration File**
    * Specify an appropriate file name (ex: IWR68xx.ccxml) and check "**Use shared location**". Click **Finish**.


  * In the configuration editor window:
    * Select **Texas Instruments XDS110 USB Debug Probe** for Connection
    * Select **IWR6843** in the **Board or Device** text box.
    * Press the **Save** button to save the target configuration.
    * [Optional]: Press the **Test Connection** button to check the connection with the board.


  * Open the target configuration window by going to **View &rarr; Target Configurations**.
    * Under **User Defined** configurations the target configuration previously created should appear.
      * Right click on the target configuration and select **Launch Select Configuration**. The target configuration will launch in the **Debug Window**.    
        <img src="images/common/target_config.png" width="450"/>

  * Connect Target
    * Select **Texas Instruments XDS110 USB Debug probe/C674X_0**and then right click and select **Connect Target** 
    * Select **Texas Instruments XDS110 USB Debug probe/Cortex_R4_0** and then right click and select **Connect Target** 

    <img src="images/common/connect_target.png" width="600"/>
    
  * Load the binary
    * Once both targets are connected, click on the C674X_0 target and then click **Load** button in the toolbar.  <img src="images\common\load_program_icon.png" width="40"/>
      <img src="images\common\load_program.png" width="400"/>
    
    * In the **Load Program** dialog, press the **Browse Project** button .
    * Select **indoor_false_det_68xx_dss.xe674** found at `<PROJECT_WORKSPACE_DIR>\multi_gesture_68xx_dss\Debug\multi_gesture_68xx_dss.xe674` and press **Ok**.
    * Press **Ok** again in the **Load Program** dialog.
    * Repeat the above Load the Binary process for the Cortex_R4_0 target, selecting instead **multi_gesture_68xx_mss.xer4f** found at `<PROJECT_WORKSPACE_DIR>\multi_gesture_68xx_mss\Debug\multi_gesture_68xx_mss.xer4f`  
    
  
  * Run the binary
    * Select **Texas Instruments XDS110 USB Debug probe/C674X_0**and then press the **Run/Resume** button <img src="images/common/run_resume_icon.png" width="30"/>
    * Select **Texas Instruments XDS110 USB Debug probe/Cortex_R4_0**, press the **Run/Resume** button <img src="images/common/run_resume_icon.png" width="30"/>
    * The program should start executing and generate console output as shown.
    
        <img src="images/ccsdebug_console.png" width="600"/>

+]]

After running the lab using either method, the demo firmware should be executing on the EVM and waiting for sensor configuration. After this point, please follow the instructions provided in the [Quickstart](#run_the_lab) section to run the demo. 

Need More Help?
===========    
    
* Find answers to common questions on [mmWave E2E FAQ](https://e2e.ti.com/support/sensor/mmwave_sensors/w/wiki)
* Search for your issue or post a new question on the [mmWave E2E forum](https://e2e.ti.com/support/sensor/mmwave_sensors/f/1023)


</xmp>

<link rel="stylesheet" href="../../../.metadata/.html/scripts/highlight/styles/zenburn.css"/>
<script src="../../../.metadata/.html/scripts/strapdown/vendor/jquery-1.11.2.min.js"></script>
<script src="../../../.metadata/.html/scripts/strapdown/vendor/bootstrap.min.js"></script>
<script src="../../../.metadata/.html/scripts/highlight/highlight.pack.js"></script>
<script src="../../../.metadata/.html/scripts/strapdown/v/0.2/strapdown.js"></script>
<script src="../../../.metadata/.html/scripts/toolbox.js"></script>
<script src="../../../.metadata/.html/scripts/toolbox_fixes.js"></script>
</html>
